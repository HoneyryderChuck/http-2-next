module HTTP2Next
  DEFAULT_FLOW_WINDOW: Integer

  DEFAULT_HEADER_SIZE: Integer

  DEFAULT_MAX_CONCURRENT_STREAMS: Integer

  type settings_hash = Hash[Symbol, Integer]

  type settings_enum = Enumerable[Symbol, Integer]

  SPEC_DEFAULT_CONNECTION_SETTINGS: settings_hash

  DEFAULT_CONNECTION_SETTINGS: settings_hash

  DEFAULT_WEIGHT: Integer

  CONNECTION_PREFACE_MAGIC: String

  REQUEST_MANDATORY_HEADERS: Array[Symbol]

  RESPONSE_MANDATORY_HEADERS: Array[Symbol]

  type header_pair = [String, String]

  type frame_key = :type | :flags | :stream | :padding | :ignore |
                   # headers
                   :method | :trailer | :content_length |
                   # data, settings, ping
                   :payload | :length |
                   # promise
                   :promise_stream |
                   # window_update
                   :increment |
                   # priority
                   :dependency | :exclusive | :weight |
                   # altsvc
                   :max_age | :port | :proto | :host |
                   # origin
                   :origin |
                   # goaway
                   :last_stream | :error

  type frame_value = Integer |
                     Symbol | # type (:data, :headers)
                     Array[Symbol] |
                     String | Buffer |
                     bool |
                     Array[String] |
                     Array[Buffer] |
                     Array[[Symbol | Integer, Integer]] |
                     Enumerable[header_pair] |
                     nil

  # type frame = Hash[frame_key, frame_value]

  # exhaustive list of possible frame records

  type bla = { type: 1 }

  type data_frame = {
    type: :data,
    payload: Buffer,
    length: Integer,
    flags: Array[Symbol],
    ?padding: Integer
  }

  type headers_frame = {
    type: :headers,
    flags: Array[Symbol],
    payload: Enumerable[header_pair],
    flags: Array[Symbol],
  }
  
  type priority_frame = {
    type: :priority,
    dependency: Integer,
    exclusive: bool,
    weight: Integer,
    flags: Array[Symbol],
  }
  
  type rst_frame = {
    type: :rst_stream,
    error: Integer?
  }
  
  type settings_frame = {
    type: :settings,
    payload: Array[[Symbol | Integer, Integer]]
  }
  
  type promise_frame = {
    type: :push_promise,
    promise_stream: Integer,
    payload: Enumerable[header_pair]
  }
  
  type goaway_frame = {
    type: :goaway,
    last_stream: Integer,
    error: Integer?
  }
  
  type window_frame = {
    type: :window_update,
    increment: Integer
  }
  
  type continuation_frame = {
    type: :continuation,
    flags: Array[Symbol],
    payload: Enumerable[header_pair],
    flags: Array[Symbol],
  }
  
  type altsvc_frame = {
    type: :altsvc,
    max_age: Integer,
    port: Integer,
    proto: String,
    host: String,
    origin: String
  }

  type origin_frame = {
    type: :origin,
    payload: Array[String]
  }

  type frame = (data_frame | headers_frame | priority_frame | rst_frame | settings_frame |
    promise_frame | goaway_frame | window_frame | continuation_frame | altsvc_frame | origin_frame) &
    { stream: Integer }
end
